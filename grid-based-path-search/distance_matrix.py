reference_waypoints = {
    0: {
        (0, 1): [(-1, 2), (-1, -2)],
        (0, 3): [(-1, 2), (1.4, -3)],
        (1, 0): [(-1, -2), (-1, 1.6), (1, 1.8)],
        (1, 3): [(-1, -2), (-0.8, 1.6), (0.2, 1.2), (1.4, -3)],
        (2, 0): [(2, 0), (1, 1.8)],
        (2, 1): [(2, 0), (0.2, 1.6), (-0.8, 1.6), (-1, -2)],
    },
    1: {
        (0, 1): [(-0.2, -2.0), (-2.4, -3.8), (-2.8, -3.0), (-3.0, -2.2)],               
        (0, 2): [(-0.2, -2.0), (-1.2, -0.8), (-1.6, 0), (-2.2, 2.2)],
        (0, 3): [(-0.2, -2.0), (-0.6, 0), (-0.4, 1.6), (0.2, 2.8)],
        (0, 4): [(-0.2, -2.0), (0.8, -0.8), (4.2, -0.8), (4.2, 2.2)],
        (0, 5): [(-0.2, -2.0), (0, -2)],
        (0, 6): [(-0.2, -2.0), (1.4, -4.2), (2.8, -4.2)],

        (1, 0): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (-0.2, -2.0)],
        (1, 2): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (-1.6, -3.0), (-1.6, 0), (-2.2, 2.2)],
        (1, 3): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (-1.6, -3.0), (-0.6, 0), (-0.4, 1.6), (0.2, 2.8)],
        (1, 4): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (-1.6, -3.0), (-0.6, -0.8), (4.2, -0.8), (4.2, 2.2)],
        (1, 5): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (0, -2)],
        (1, 6): [(-3.0, -2.2), (-2.8, -3.0), (-2.4, -3.8), (-1.6, -3.0), (2.8, -4.2)],
                    
        (2, 0): [(-2.2, 2.2), (-1.6, 0), (-0.2, -2.0)],			
        (2, 1): [(-2.2, 2.2), (-1.6, 0), (-1.6, -3.0), (-2.4, -3.8), (-2.8, -3.0), (-3.0, -2.2)],
        (2, 3): [(-2.2, 2.2), (-1.6, 0), (-1.2, -0.8), (-0.6, 0), (-0.4, 1.6), (0.2, 2.8)],
        (2, 4): [(-2.2, 2.2), (-1.6, 0), (-1.2, -0.8), (4.2, -0.8), (4.2, 2.2)],
        (2, 5): [(-2.2, 2.2), (-1.6, 0), (0, -2)],
        (2, 6): [(-2.2, 2.2), (-1.6, 0), (1.4, -4.2), (2.8, -4.2)],			
            
        (3, 0): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (-0.2, -2.0)],	
        (3, 1): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (-1.6, -3.0), (-2.4, -3.8), (-2.8, -3.0), (-3.0, -2.2)],
        (3, 2): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (-1.2, -0.8), (-1.6, 0), (-2.2, 2.2)],
        (3, 4): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (-0.6, -0.8), (4.2, -0.8), (4.2, 2.2)],
        (3, 5): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (0, -2)],
        (3, 6): [(0.2, 2.8), (-0.4, 1.6), (-0.6, 0), (1.4, -4.2), (2.8, -4.2)],

        (4, 0): [(4.2, 2.2), (4.2, -0.8), (0.8, -0.8), (-0.2, -2.0)],
        (4, 1): [(4.2, 2.2), (4.2, -0.8), (0.8, -0.8), (-2.4, -3.8), (-2.8, -3.0), (-3.0, -2.2)],
        (4, 2): [(4.2, 2.2), (4.2, -0.8), (-1.2, -0.8), (-1.6, 0), (-2.2, 2.2)],
        (4, 3): [(4.2, 2.2), (4.2, -0.8), (-0.6, -0.8), (-0.6, 0), (-0.4, 1.6), (0.2, 2.8)],
        (4, 5): [(4.2, 2.2), (4.2, -0.8), (0.8, -0.8), (0, -2)],
        (4, 6): [(4.2, 2.2), (4.2, -0.8), (2.8, -0.8), (2.8, -4.2)],

        (5, 0): [(0, -2), (-0.2, -2.0)],
        (5, 1): [(0, -2), (-2.4, -3.8), (-2.8, -3.0), (-3.0, -2.2)],               
        (5, 2): [(0, -2), (-1.2, -0.8), (-1.6, 0), (-2.2, 2.2)],
        (5, 3): [(0, -2), (-0.6, 0), (-0.4, 1.6), (0.2, 2.8)],
        (5, 4): [(0, -2), (0.8, -0.8), (4.2, -0.8), (4.2, 2.2)],
        (5, 6): [(0, -2), (1.4, -4.2), (2.8, -4.2)],
    },
    2: {},
    3: {},
}

distance_matrices = {
    0: [
        [0.0, 4.0, 0.0, 5.5],
        [5.6, 0.0, 0.0, 9.1],
        [2.1, 7.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
    ],
    1: [
        [0.0, 4.6, 4.7, 5.0, 8.0, 0.2, 4.1],
        [4.6, 0.0, 8.1, 9.0, 13.1, 4.7, 7.4],
        [4.7, 8.1, 0.0, 7.1, 11.6, 4.8, 8.8],
        [5.0, 9.0, 7.1, 0.0, 11.6, 5.0, 9.0],
        [8.0, 12.5, 11.6, 11.6, 0.0, 7.8, 7.8],
        [0.2, 4.7, 4.9, 5.0, 7.8, 0.0, 4.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    ],
    2: [],
    3: [],
}


import math

# 거리 계산 함수 (원래 거리 그대로)
def distance_between_points(point1, point2):
    x1, y1 = point1
    x2, y2 = point2
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

# 거리 행렬 계산
def compute_distance_matrix(reference_waypoints_map):
    node_indices = set()
    for (start, end) in reference_waypoints_map.keys():
        node_indices.add(start)
        node_indices.add(end)
    n_nodes = max(node_indices) + 1

    # 일반 리스트로 초기화
    dist_matrix = [[0.0 for _ in range(n_nodes)] for _ in range(n_nodes)]

    for (start, end), waypoints in reference_waypoints_map.items():
        if not waypoints:
            continue
        path = waypoints.copy()
        total_distance = 0
        for i in range(len(path) - 1):
            total_distance += distance_between_points(path[i], path[i+1])
        # 최종 거리만 소수점 1자리로 반올림
        dist_matrix[start][end] = round(total_distance, 1)

    return dist_matrix

# 모든 map_id에 대해 거리 행렬 생성
distance_matrices = {}
for map_id, waypoints_map in reference_waypoints.items():
    if waypoints_map:
        dist_mat = compute_distance_matrix(waypoints_map)
        distance_matrices[map_id] = dist_mat
    else:
        distance_matrices[map_id] = []

# 출력 (일반 리스트, 소수점 1자리)
for map_id, dist_mat in distance_matrices.items():
    print(f"Map ID {map_id}:")
    print("[")
    for row in dist_mat:
        row_str = [f"{d:.1f}" for d in row]
        print(f"  [{', '.join(row_str)}],")
    print("]")
    print()
